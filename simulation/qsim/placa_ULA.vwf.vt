// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2016 22:49:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    placa_ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module placa_ULA_vlg_sample_tst(
	A,
	B,
	S,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input [2:0] S;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module placa_ULA_vlg_check_tst (
	display_a,
	display_b,
	display_c,
	display_d,
	display_dp,
	display_e,
	display_f,
	display_g,
	overflow,
	status,
	sampler_rx
);
input  display_a;
input  display_b;
input  display_c;
input  display_d;
input  display_dp;
input  display_e;
input  display_f;
input  display_g;
input  overflow;
input  status;
input sampler_rx;

reg  display_a_expected;
reg  display_b_expected;
reg  display_c_expected;
reg  display_d_expected;
reg  display_dp_expected;
reg  display_e_expected;
reg  display_f_expected;
reg  display_g_expected;
reg  overflow_expected;
reg  status_expected;

reg  display_a_prev;
reg  display_b_prev;
reg  display_c_prev;
reg  display_d_prev;
reg  display_dp_prev;
reg  display_e_prev;
reg  display_f_prev;
reg  display_g_prev;
reg  overflow_prev;
reg  status_prev;

reg  display_a_expected_prev;
reg  display_b_expected_prev;
reg  display_c_expected_prev;
reg  display_d_expected_prev;
reg  display_dp_expected_prev;
reg  display_e_expected_prev;
reg  display_f_expected_prev;
reg  display_g_expected_prev;
reg  overflow_expected_prev;
reg  status_expected_prev;

reg  last_display_a_exp;
reg  last_display_b_exp;
reg  last_display_c_exp;
reg  last_display_d_exp;
reg  last_display_dp_exp;
reg  last_display_e_exp;
reg  last_display_f_exp;
reg  last_display_g_exp;
reg  last_overflow_exp;
reg  last_status_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	display_a_prev = display_a;
	display_b_prev = display_b;
	display_c_prev = display_c;
	display_d_prev = display_d;
	display_dp_prev = display_dp;
	display_e_prev = display_e;
	display_f_prev = display_f;
	display_g_prev = display_g;
	overflow_prev = overflow;
	status_prev = status;
end

// update expected /o prevs

always @(trigger)
begin
	display_a_expected_prev = display_a_expected;
	display_b_expected_prev = display_b_expected;
	display_c_expected_prev = display_c_expected;
	display_d_expected_prev = display_d_expected;
	display_dp_expected_prev = display_dp_expected;
	display_e_expected_prev = display_e_expected;
	display_f_expected_prev = display_f_expected;
	display_g_expected_prev = display_g_expected;
	overflow_expected_prev = overflow_expected;
	status_expected_prev = status_expected;
end



// expected display_a
always
begin
	display_a_expected = 1'b0;
	display_a_expected = #1000 1'b1;
	#1000;
end 

// expected display_b
always
begin
	display_b_expected = 1'b0;
	display_b_expected = #1000 1'b1;
	#1000;
end 

// expected display_c
always
begin
	display_c_expected = 1'b0;
	display_c_expected = #1000 1'b1;
	#1000;
end 

// expected display_d
always
begin
	display_d_expected = 1'b0;
	display_d_expected = #1000 1'b1;
	#1000;
end 

// expected display_dp
always
begin
	display_dp_expected = 1'b0;
	display_dp_expected = #1000 1'b1;
	#1000;
end 

// expected display_e
always
begin
	display_e_expected = 1'b0;
	display_e_expected = #1000 1'b1;
	#1000;
end 

// expected display_f
always
begin
	display_f_expected = 1'b0;
	display_f_expected = #1000 1'b1;
	#1000;
end 

// expected display_g
always
begin
	display_g_expected = 1'b0;
	display_g_expected = #1000 1'b1;
	#1000;
end 

// expected overflow
always
begin
	overflow_expected = 1'b0;
	overflow_expected = #1000 1'b1;
	#1000;
end 

// expected status
always
begin
	status_expected = 1'b0;
	status_expected = #1000 1'b1;
	#1000;
end 
// generate trigger
always @(display_a_expected or display_a or display_b_expected or display_b or display_c_expected or display_c or display_d_expected or display_d or display_dp_expected or display_dp or display_e_expected or display_e or display_f_expected or display_f or display_g_expected or display_g or overflow_expected or overflow or status_expected or status)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display_a = %b | expected display_b = %b | expected display_c = %b | expected display_d = %b | expected display_dp = %b | expected display_e = %b | expected display_f = %b | expected display_g = %b | expected overflow = %b | expected status = %b | ",display_a_expected_prev,display_b_expected_prev,display_c_expected_prev,display_d_expected_prev,display_dp_expected_prev,display_e_expected_prev,display_f_expected_prev,display_g_expected_prev,overflow_expected_prev,status_expected_prev);
	$display("| real display_a = %b | real display_b = %b | real display_c = %b | real display_d = %b | real display_dp = %b | real display_e = %b | real display_f = %b | real display_g = %b | real overflow = %b | real status = %b | ",display_a_prev,display_b_prev,display_c_prev,display_d_prev,display_dp_prev,display_e_prev,display_f_prev,display_g_prev,overflow_prev,status_prev);
`endif
	if (
		( display_a_expected_prev !== 1'bx ) && ( display_a_prev !== display_a_expected_prev )
		&& ((display_a_expected_prev !== last_display_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_a_expected_prev);
		$display ("     Real value = %b", display_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_a_exp = display_a_expected_prev;
	end
	if (
		( display_b_expected_prev !== 1'bx ) && ( display_b_prev !== display_b_expected_prev )
		&& ((display_b_expected_prev !== last_display_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b_expected_prev);
		$display ("     Real value = %b", display_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b_exp = display_b_expected_prev;
	end
	if (
		( display_c_expected_prev !== 1'bx ) && ( display_c_prev !== display_c_expected_prev )
		&& ((display_c_expected_prev !== last_display_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_c_expected_prev);
		$display ("     Real value = %b", display_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_c_exp = display_c_expected_prev;
	end
	if (
		( display_d_expected_prev !== 1'bx ) && ( display_d_prev !== display_d_expected_prev )
		&& ((display_d_expected_prev !== last_display_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_d_expected_prev);
		$display ("     Real value = %b", display_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_d_exp = display_d_expected_prev;
	end
	if (
		( display_dp_expected_prev !== 1'bx ) && ( display_dp_prev !== display_dp_expected_prev )
		&& ((display_dp_expected_prev !== last_display_dp_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_dp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_dp_expected_prev);
		$display ("     Real value = %b", display_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display_dp_exp = display_dp_expected_prev;
	end
	if (
		( display_e_expected_prev !== 1'bx ) && ( display_e_prev !== display_e_expected_prev )
		&& ((display_e_expected_prev !== last_display_e_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_e_expected_prev);
		$display ("     Real value = %b", display_e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_e_exp = display_e_expected_prev;
	end
	if (
		( display_f_expected_prev !== 1'bx ) && ( display_f_prev !== display_f_expected_prev )
		&& ((display_f_expected_prev !== last_display_f_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_f_expected_prev);
		$display ("     Real value = %b", display_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display_f_exp = display_f_expected_prev;
	end
	if (
		( display_g_expected_prev !== 1'bx ) && ( display_g_prev !== display_g_expected_prev )
		&& ((display_g_expected_prev !== last_display_g_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_g_expected_prev);
		$display ("     Real value = %b", display_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display_g_exp = display_g_expected_prev;
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( status_expected_prev !== 1'bx ) && ( status_prev !== status_expected_prev )
		&& ((status_expected_prev !== last_status_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_status_exp = status_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module placa_ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [2:0] S;
// wires                                               
wire display_a;
wire display_b;
wire display_c;
wire display_d;
wire display_dp;
wire display_e;
wire display_f;
wire display_g;
wire overflow;
wire status;

wire sampler;                             

// assign statements (if any)                          
placa_ULA i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.display_a(display_a),
	.display_b(display_b),
	.display_c(display_c),
	.display_d(display_d),
	.display_dp(display_dp),
	.display_e(display_e),
	.display_f(display_f),
	.display_g(display_g),
	.overflow(overflow),
	.S(S),
	.status(status)
);
// S[ 2 ]
always
begin
	S[2] = 1'b0;
	S[2] = #4000 1'b1;
	#4000;
end 
// S[ 1 ]
always
begin
	S[1] = 1'b0;
	S[1] = #2000 1'b1;
	#2000;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #1000 1'b1;
	#1000;
end 
// A[ 3 ]
initial
begin
	repeat(7)
	begin
		A[3] = 1'b0;
		A[3] = #64000 1'b1;
		# 64000;
	end
	A[3] = 1'b0;
	A[3] = #64000 1'b1;
end 
// A[ 2 ]
initial
begin
	repeat(15)
	begin
		A[2] = 1'b0;
		A[2] = #32000 1'b1;
		# 32000;
	end
	A[2] = 1'b0;
	A[2] = #32000 1'b1;
end 
// A[ 1 ]
initial
begin
	repeat(31)
	begin
		A[1] = 1'b0;
		A[1] = #16000 1'b1;
		# 16000;
	end
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	repeat(62)
	begin
		A[0] = 1'b0;
		A[0] = #8000 1'b1;
		# 8000;
	end
	A[0] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #512000 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #256000 1'b1;
	B[1] = #256000 1'b0;
	B[1] = #256000 1'b1;
end 
// B[ 0 ]
initial
begin
	repeat(3)
	begin
		B[0] = 1'b0;
		B[0] = #128000 1'b1;
		# 128000;
	end
	B[0] = 1'b0;
	B[0] = #128000 1'b1;
end 

placa_ULA_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.S(S),
	.sampler_tx(sampler)
);

placa_ULA_vlg_check_tst tb_out(
	.display_a(display_a),
	.display_b(display_b),
	.display_c(display_c),
	.display_d(display_d),
	.display_dp(display_dp),
	.display_e(display_e),
	.display_f(display_f),
	.display_g(display_g),
	.overflow(overflow),
	.status(status),
	.sampler_rx(sampler)
);
endmodule

