// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2016 23:44:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DEMUX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DEMUX_vlg_sample_tst(
	A,
	E,
	G,
	L,
	O0,
	O1,
	O2,
	S,
	X,
	Z0,
	Z1,
	Z2,
	sampler_tx
);
input [3:0] A;
input  E;
input  G;
input  L;
input  O0;
input  O1;
input  O2;
input [2:0] S;
input [3:0] X;
input [3:0] Z0;
input [3:0] Z1;
input [3:0] Z2;
output sampler_tx;

reg sample;
time current_time;
always @(A or E or G or L or O0 or O1 or O2 or S or X or Z0 or Z1 or Z2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DEMUX_vlg_check_tst (
	F,
	overflow,
	status,
	sampler_rx
);
input [3:0] F;
input  overflow;
input  status;
input sampler_rx;

reg [3:0] F_expected;
reg  overflow_expected;
reg  status_expected;

reg [3:0] F_prev;
reg  overflow_prev;
reg  status_prev;

reg [3:0] F_expected_prev;
reg  overflow_expected_prev;
reg  status_expected_prev;

reg [3:0] last_F_exp;
reg  last_overflow_exp;
reg  last_status_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	F_prev = F;
	overflow_prev = overflow;
	status_prev = status;
end

// update expected /o prevs

always @(trigger)
begin
	F_expected_prev = F_expected;
	overflow_expected_prev = overflow_expected;
	status_expected_prev = status_expected;
end



// expected overflow
always
begin
	overflow_expected = 1'b0;
	overflow_expected = #100 1'b1;
	#100;
end 

// expected status
always
begin
	status_expected = 1'b0;
	status_expected = #100 1'b1;
	#100;
end 
// expected F[ 3 ]
always
begin
	F_expected[3] = 1'b0;
	F_expected[3] = #800 1'b1;
	#800;
end 
// expected F[ 2 ]
always
begin
	F_expected[2] = 1'b0;
	F_expected[2] = #400 1'b1;
	#400;
end 
// expected F[ 1 ]
always
begin
	F_expected[1] = 1'b0;
	F_expected[1] = #200 1'b1;
	#200;
end 
// expected F[ 0 ]
always
begin
	F_expected[0] = 1'b0;
	F_expected[0] = #100 1'b1;
	#100;
end 
// generate trigger
always @(F_expected or F or overflow_expected or overflow or status_expected or status)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected F = %b | expected overflow = %b | expected status = %b | ",F_expected_prev,overflow_expected_prev,status_expected_prev);
	$display("| real F = %b | real overflow = %b | real status = %b | ",F_prev,overflow_prev,status_prev);
`endif
	if (
		( F_expected_prev[0] !== 1'bx ) && ( F_prev[0] !== F_expected_prev[0] )
		&& ((F_expected_prev[0] !== last_F_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_exp[0] = F_expected_prev[0];
	end
	if (
		( F_expected_prev[1] !== 1'bx ) && ( F_prev[1] !== F_expected_prev[1] )
		&& ((F_expected_prev[1] !== last_F_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_exp[1] = F_expected_prev[1];
	end
	if (
		( F_expected_prev[2] !== 1'bx ) && ( F_prev[2] !== F_expected_prev[2] )
		&& ((F_expected_prev[2] !== last_F_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_exp[2] = F_expected_prev[2];
	end
	if (
		( F_expected_prev[3] !== 1'bx ) && ( F_prev[3] !== F_expected_prev[3] )
		&& ((F_expected_prev[3] !== last_F_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_exp[3] = F_expected_prev[3];
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( status_expected_prev !== 1'bx ) && ( status_prev !== status_expected_prev )
		&& ((status_expected_prev !== last_status_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_status_exp = status_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DEMUX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg E;
reg G;
reg L;
reg O0;
reg O1;
reg O2;
reg [2:0] S;
reg [3:0] X;
reg [3:0] Z0;
reg [3:0] Z1;
reg [3:0] Z2;
// wires                                               
wire [3:0] F;
wire overflow;
wire status;

wire sampler;                             

// assign statements (if any)                          
DEMUX i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.E(E),
	.F(F),
	.G(G),
	.L(L),
	.O0(O0),
	.O1(O1),
	.O2(O2),
	.overflow(overflow),
	.S(S),
	.status(status),
	.X(X),
	.Z0(Z0),
	.Z1(Z1),
	.Z2(Z2)
);
// S[ 2 ]
always
begin
	S[2] = 1'b0;
	S[2] = #400 1'b1;
	#400;
end 
// S[ 1 ]
always
begin
	S[1] = 1'b0;
	S[1] = #200 1'b1;
	#200;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #100 1'b1;
	#100;
end 
// Z0[ 3 ]
initial
begin
	repeat(312)
	begin
		Z0[3] = 1'b0;
		Z0[3] = #1600 1'b1;
		# 1600;
	end
	Z0[3] = 1'b0;
end 
// Z0[ 2 ]
always
begin
	Z0[2] = 1'b0;
	Z0[2] = #800 1'b1;
	#800;
end 
// Z0[ 1 ]
always
begin
	Z0[1] = 1'b0;
	Z0[1] = #400 1'b1;
	#400;
end 
// Z0[ 0 ]
always
begin
	Z0[0] = 1'b0;
	Z0[0] = #200 1'b1;
	#200;
end 

// O0
always
begin
	O0 = 1'b0;
	O0 = #400 1'b1;
	#400;
end 
// Z1[ 3 ]
initial
begin
	repeat(78)
	begin
		Z1[3] = 1'b0;
		Z1[3] = #6400 1'b1;
		# 6400;
	end
	Z1[3] = 1'b0;
end 
// Z1[ 2 ]
initial
begin
	repeat(156)
	begin
		Z1[2] = 1'b0;
		Z1[2] = #3200 1'b1;
		# 3200;
	end
	Z1[2] = 1'b0;
end 
// Z1[ 1 ]
initial
begin
	repeat(312)
	begin
		Z1[1] = 1'b0;
		Z1[1] = #1600 1'b1;
		# 1600;
	end
	Z1[1] = 1'b0;
end 
// Z1[ 0 ]
always
begin
	Z1[0] = 1'b0;
	Z1[0] = #800 1'b1;
	#800;
end 

// O1
initial
begin
	repeat(312)
	begin
		O1 = 1'b0;
		O1 = #1600 1'b1;
		# 1600;
	end
	O1 = 1'b0;
end 
// Z2[ 3 ]
initial
begin
	repeat(19)
	begin
		Z2[3] = 1'b0;
		Z2[3] = #25600 1'b1;
		# 25600;
	end
	Z2[3] = 1'b0;
	Z2[3] = #25600 1'b1;
end 
// Z2[ 2 ]
initial
begin
	repeat(39)
	begin
		Z2[2] = 1'b0;
		Z2[2] = #12800 1'b1;
		# 12800;
	end
	Z2[2] = 1'b0;
end 
// Z2[ 1 ]
initial
begin
	repeat(78)
	begin
		Z2[1] = 1'b0;
		Z2[1] = #6400 1'b1;
		# 6400;
	end
	Z2[1] = 1'b0;
end 
// Z2[ 0 ]
initial
begin
	repeat(156)
	begin
		Z2[0] = 1'b0;
		Z2[0] = #3200 1'b1;
		# 3200;
	end
	Z2[0] = 1'b0;
end 

// O2
initial
begin
	repeat(78)
	begin
		O2 = 1'b0;
		O2 = #6400 1'b1;
		# 6400;
	end
	O2 = 1'b0;
end 

// E
initial
begin
	repeat(39)
	begin
		E = 1'b0;
		E = #12800 1'b1;
		# 12800;
	end
	E = 1'b0;
end 

// G
initial
begin
	repeat(19)
	begin
		G = 1'b0;
		G = #25600 1'b1;
		# 25600;
	end
	G = 1'b0;
	G = #25600 1'b1;
end 

// L
initial
begin
	repeat(9)
	begin
		L = 1'b0;
		L = #51200 1'b1;
		# 51200;
	end
	L = 1'b0;
	L = #51200 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #819200 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #409600 1'b1;
	A[2] = #409600 1'b0;
end 
// A[ 1 ]
initial
begin
	repeat(2)
	begin
		A[1] = 1'b0;
		A[1] = #204800 1'b1;
		# 204800;
	end
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	repeat(4)
	begin
		A[0] = 1'b0;
		A[0] = #102400 1'b1;
		# 102400;
	end
	A[0] = 1'b0;
	A[0] = #102400 1'b1;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
	X[2] = #819200 1'b1;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
	X[1] = #409600 1'b1;
	X[1] = #409600 1'b0;
end 
// X[ 0 ]
initial
begin
	repeat(2)
	begin
		X[0] = 1'b0;
		X[0] = #204800 1'b1;
		# 204800;
	end
	X[0] = 1'b0;
end 

DEMUX_vlg_sample_tst tb_sample (
	.A(A),
	.E(E),
	.G(G),
	.L(L),
	.O0(O0),
	.O1(O1),
	.O2(O2),
	.S(S),
	.X(X),
	.Z0(Z0),
	.Z1(Z1),
	.Z2(Z2),
	.sampler_tx(sampler)
);

DEMUX_vlg_check_tst tb_out(
	.F(F),
	.overflow(overflow),
	.status(status),
	.sampler_rx(sampler)
);
endmodule

